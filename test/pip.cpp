#include <gtest/gtest.h>

#include <vector>

#include "../common.h"
#include "../core.h"
#include "../gmlparser.h"
#include "../FloatingPoint.h"

#include <CGAL/Bbox_2.h>
#include <CGAL/Polygon_2_algorithms.h>
#include <CGAL/Range_segment_tree_traits.h>
#include <CGAL/Range_tree_k.h>

bool pip(double x, double y, const Ring &r)
{
    int w = 0;
    for (size_t i = 0; i < r.ring.size() - 1; ++i) {
        double x0 = r.ring[i].x() - x, y0 = r.ring[i].y() - y;
        double x1 = r.ring[i+1].x() - x, y1 = r.ring[i+1].y() - y;
        if (y0 * y1 < 0) {
            if (x0 + y0*(x1-x0)/(y0-y1) > 0) {
                if (y0 < 0) w += 2; else w -= 2;
            }
        } else if (FloatingPoint<double>(y0).AlmostEquals(FloatingPoint<double>(0)) && x0 >= 0) {
            if (y1 > 0) ++w; else if (y1 < 0) --w;
        } else if (FloatingPoint<double>(y1).AlmostEquals(FloatingPoint<double>(0)) && x1 >= 0) {
            if (y0 < 0) ++w; else if (y0 > 0)--w;
        }
    }
    return 0 == w % 2;
}

TEST(core, pip)
{
    double x = -1.31800368974221E7, y = 3995712.25191062;
    const char *polystr = "<gml:Polygon srsName=\"EPSG:54004\" xmlns:gml=\"http://www.opengis.net/gml\"><gml:outerBoundaryIs><gml:LinearRing><gml:coordinates decimal=\".\" cs=\",\" ts=\" \">-1.31802268012391E7,3995733.19323201 -1.31802395256431E7,3995720.68190532 -1.31802269911328E7,3995707.8140681 -1.31801311648865E7,3995550.75506147 -1.31801106289689E7,3995530.27717597 -1.31799873414039E7,3995406.04880287 -1.31799285341729E7,3995295.21814538 -1.31799084274951E7,3995289.09139271 -1.31798694656733E7,3995279.2544782 -1.31798416358005E7,3995273.63338841 -1.31798082399533E7,3995266.60703054 -1.3179774844106E7,3995260.9859477 -1.31797425614536E7,3995255.36486794 -1.31797091656064E7,3995251.14906015 -1.3179676882954E7,3995248.33852259 -1.31793974710318E7,3994975.72004198 -1.3179396357837E7,3994967.28865816 -1.31793930182523E7,3994958.8572813 -1.31793863390828E7,3994954.64159548 -1.31793752071338E7,3994953.23636725 -1.31789733437717E7,3994951.8311392 -1.31786928186547E7,3994631.44417728 -1.31786883658751E7,3994621.60789392 -1.31786550584884E7,3994479.05636507 -1.31786266011075E7,3994471.87795949 -1.31785521717707E7,3994538.6173082 -1.31784821057999E7,3994610.08694252 -1.3177935846117E7,3994329.334067 -1.31779374088977E7,3994308.62139702 -1.31777143203302E7,3994037.06857349 -1.31776631133645E7,3993979.45953149 -1.31776063404242E7,3993951.35767725 -1.31775250771959E7,3993886.72370488 -1.31775072660773E7,3993878.29321681 -1.31774927945435E7,3993878.29321681 -1.31771655152405E7,3993824.90028657 -1.31770196867076E7,3993761.67217619 -1.3176905027632E7,3993765.88737143 -1.31768048400903E7,3993736.38104125 -1.31767013129639E7,3993674.55852959 -1.31766823886505E7,3993666.12821598 -1.31766645775319E7,3993661.91306177 -1.31765287677532E7,3993719.52031929 -1.31765098434397E7,3993722.33043769 -1.3176168092603E7,3993635.21712538 -1.31760532850571E7,3993495.56227062 -1.31760022265617E7,3993382.31170311 -1.31757139090806E7,3992942.55213048 -1.31758085306477E7,3992605.36906811 -1.31757506445124E7,3992522.47992994 -1.31756582493352E7,3992377.77676931 -1.3175745078538E7,3992016.73021444 -1.31757662292412E7,3991997.06267384 -1.3175805191063E7,3991957.72770581 -1.31758575112238E7,3991902.93996606 -1.317638293922E7,3992064.49439863 -1.31763885051947E7,3992046.23159603 -1.31763896183896E7,3992019.53986616 -1.317638293922E7,3991995.65785093 -1.3176371807271E7,3991974.58553076 -1.31763506565678E7,3991950.70362023 -1.31762682801445E7,3991887.48706674 -1.31761013009084E7,3991754.03117808 -1.31760601126968E7,3991724.53063709 -1.31760512071377E7,3991718.91149604 -1.31760267168497E7,3991738.57850316 -1.31759554723756E7,3991818.65170729 -1.31758508320542E7,3991890.2966831 -1.31758263417663E7,3991909.96401891 -1.31757918327241E7,3991949.29880372 -1.31757050035212E7,3992026.5639989 -1.31754344971587E7,3992057.47023997 -1.31754222520147E7,3992056.06540881 -1.31753487811508E7,3992051.85091648 -1.3175081614373E7,3991940.86990855 -1.31750381997716E7,3991880.4630293 -1.31749780872465E7,3991807.41332513 -1.31748010892562E7,3991527.86253254 -1.31747754857733E7,3991482.9103525 -1.31747532218751E7,3991435.14887713 -1.31747253920024E7,3991373.34023919 -1.31747031281043E7,3991317.15089158 -1.31747004268883E7,3991308.52904565 -1.31745639787409E7,3991095.20597825 -1.31745584127663E7,3991068.51672359 -1.31745639787409E7,3990828.31655712 -1.317457511069E7,3990796.0093616 -1.31746385627997E7,3990635.87954695 -1.31746586003081E7,3990572.67109781 -1.31746684457611E7,3990531.62133428 -1.31744462490971E7,3990506.90982012 -1.31744120218517E7,3990494.56929424 -1.31742719186433E7,3990413.08640818 -1.31742389258279E7,3990418.16319522 -1.31742055538096E7,3990420.64014461 -1.31741099788702E7,3990422.19560201 -1.31740396639394E7,3990425.18623117 -1.31736925588722E7,3990222.32164748 -1.31733435276043E7,3990017.56584533 -1.3173330070023E7,3990009.86279278 -1.31732488207814E7,3990120.41035196 -1.31731747393693E7,3990219.95261707 -1.31731002667122E7,3990323.65661269 -1.31730260834486E7,3990424.71508284 -1.31729529448433E7,3990527.22290783 -1.31728772906428E7,3990629.51219859 -1.31728282401046E7,3990709.31749666 -1.31727358642963E7,3990825.28708373 -1.3172704468461E7,3990870.94869509 -1.31726458237083E7,3991100.31966867 -1.31725504424969E7,3991188.07383622 -1.31724449947033E7,3991365.25054045 -1.31723607321925E7,3991444.12659524 -1.31722314039242E7,3991614.80994646 -1.31721450750527E7,3991696.61565363 -1.31720856898508E7,3992025.44195891 -1.31720805721E7,3992060.22471183 -1.31719823243276E7,3992306.48803925 -1.31720823678911E7,3992428.9114479 -1.31722752500095E7,3992654.54090698 -1.31720893464597E7,3993095.69309942 -1.31720670825615E7,3993111.14781973 -1.3171852235944E7,3993201.06665449 -1.31717119733855E7,3993358.42651307 -1.31716953475813E7,3993367.81414907 -1.31714859487806E7,3993833.3700058 -1.31714192031244E7,3994015.99205698 -1.31713468454553E7,3994302.63639232 -1.31713346003113E7,3994365.86783951 -1.31713823593188E7,3994536.3149006 -1.3171448146192E7,3994672.1945946 -1.31716017670894E7,3994791.6364064 -1.31717353504784E7,3994940.5893219 -1.31717642935463E7,3995024.90325238 -1.3171875613037E7,3995105.00212876 -1.31719334991723E7,3995172.45429965 -1.31720626297818E7,3995305.95469667 -1.31721661569082E7,3995447.88860488 -1.31721973263657E7,3995508.31650891 -1.31722017791454E7,3995512.53242248 -1.31722927412273E7,3995566.47639997 -1.31726871321254E7,3995789.38121029 -1.31726915849051E7,3995800.62395868 -1.3172766168964E7,3995950.99690414 -1.31726949244899E7,3996274.23593849 -1.31728040175909E7,3996413.3724009 -1.31728218287094E7,3996431.64298578 -1.31728374134381E7,3996445.69730402 -1.31728563377516E7,3996452.72447037 -1.31729843551661E7,3996499.10388908 -1.31731212781398E7,3996601.70153091 -1.31731780510802E7,3996695.86739394 -1.31731936358089E7,3996733.8150759 -1.3173252635139E7,3996767.54646676 -1.31733094080793E7,3996808.30537885 -1.31733338983673E7,3996827.98215304 -1.31734040296465E7,3996894.04017141 -1.31734860513569E7,3997001.83364233 -1.3173798100644E7,3996823.76569818 -1.31738192513473E7,3996822.36021363 -1.31738404020505E7,3996816.73827737 -1.31740185132359E7,3996781.60124561 -1.31740496826932E7,3996780.19576683 -1.31740708333964E7,3996775.97933169 -1.31744393009111E7,3997177.9539499 -1.31744315085467E7,3997208.87572759 -1.31744292821569E7,3997224.33665143 -1.31744181502078E7,3997300.2360705 -1.31744114710384E7,3997339.5915462 -1.31741777001077E7,3997591.18905252 -1.31742856800137E7,3997688.17521598 -1.31743535849032E7,3997755.64439296 -1.31744125842333E7,3997821.70839263 -1.3174476036343E7,3997887.7728183 -1.31745461676222E7,3997949.62075185 -1.3174609619732E7,3998019.90294775 -1.31746897697654E7,3998206.85593597 -1.31748756733151E7,3998285.57400433 -1.31749324462552E7,3998341.80156639 -1.31749435782044E7,3998355.85850512 -1.31750615768646E7,3998472.53184107 -1.317511723661E7,3998562.49773041 -1.31751283685591E7,3998577.9606972 -1.31751450664827E7,3998599.04659864 -1.31751651039911E7,3998620.13254348 -1.31752530463888E7,3998717.12844882 -1.31752719707022E7,3998741.02613172 -1.31752998005749E7,3998766.32962146 -1.31754181687716E7,3998864.50681829 -1.31754879305142E7,3998922.36918937 -1.31755202131666E7,3998953.29623285 -1.31755825520814E7,3999040.45476681 -1.31756322947945E7,3999185.75862816 -1.31756560229453E7,3999188.06365302 -1.31759084197214E7,3999365.12204314 -1.31759478404506E7,3999451.25412515 -1.31759532459856E7,3999449.54747327 -1.31760055661463E7,3999436.89487667 -1.31763303274704E7,3999518.53380702 -1.31764391919825E7,3999528.76012669 -1.31767034930817E7,3999700.39210512 -1.31767785198072E7,3999734.92789513 -1.31768187241655E7,3999764.13596955 -1.31768346971133E7,3999757.69054805 -1.3177318509272E7,3999686.84172639 -1.31774189497214E7,3999734.73803271 -1.31776574124658E7,3999389.09631977 -1.3177729511379E7,3999285.16110359 -1.31778044141331E7,3999183.84622713 -1.31778642521358E7,3999094.63337218 -1.31779722978062E7,3998917.95768256 -1.31779992089707E7,3998891.44223972 -1.31780901686549E7,3998789.51243022 -1.31782096920639E7,3998591.15057512 -1.31782144640269E7,3998586.36803077 -1.3178277201536E7,3998520.95253954 -1.31783312958571E7,3998412.08645341 -1.31784289868311E7,3998313.68774726 -1.31785339866182E7,3998113.60616201 -1.31786262828472E7,3998006.98696744 -1.31786552568339E7,3997986.69736239 -1.3178755160523E7,3997910.78828572 -1.31789388347291E7,3997818.0336041 -1.31789633647875E7,3997793.59600082 -1.31791678735169E7,3997597.21255355 -1.31791812608874E7,3997583.99392424 -1.31792773772617E7,3997381.90564135 -1.31793042125524E7,3997355.05266786 -1.31793930182519E7,3997292.34525699 -1.31794587241509E7,3997198.18430945 -1.31792939682037E7,3996740.45336583 -1.31795391209361E7,3996497.69844934 -1.31795566579037E7,3996477.70810348 -1.31796624114201E7,3996370.97798195 -1.3179725684242E7,3996307.09753156 -1.31798585761401E7,3996111.20976006 -1.31799890611122E7,3995970.70809408 -1.31800436365506E7,3995915.86284107 -1.31802268012391E7,3995733.19323201 </gml:coordinates></gml:LinearRing></gml:outerBoundaryIs></gml:Polygon>";

    GMLParser gml;
    Polygon poly;

    gml.polygon(polystr, poly.outer_ring, poly.inner_rings);

    EXPECT_FALSE(CGAL::ON_BOUNDED_SIDE ==
                 CGAL::bounded_side_2(poly.outer_ring.ring.begin(),
                                      poly.outer_ring.ring.end(),
                                      Point_2(x, y), K()));

    EXPECT_FALSE(pip(x, y, poly.outer_ring));

    for (size_t i = 0; i < poly.inner_rings.size(); ++i) {
        Ring &r = poly.inner_rings[i];
        EXPECT_FALSE(CGAL::ON_UNBOUNDED_SIDE ==
                     CGAL::bounded_side_2(r.ring.begin(), r.ring.end(),
                                          Point_2(x, y), K())) << i;
    }
}
